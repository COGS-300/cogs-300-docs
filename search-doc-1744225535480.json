{"searchDocs":[{"title":"welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Test","keywords":"","version":null},{"title":"Contact","type":0,"sectionRef":"#","url":"/docs/course-info/Contact","content":"Contact","keywords":"","version":"Next"},{"title":"Labs","type":0,"sectionRef":"#","url":"/docs/concepts/teaching/labs","content":"","keywords":"","version":"Next"},{"title":"Using the Labs Teaching Notes​","type":1,"pageTitle":"Labs","url":"/docs/concepts/teaching/labs#using-the-labs-teaching-notes","content":" The teaching notes will include instructor TODOs for the labs, markdown slides that you can use/modify/adapt for your lab, and concept notes. ","version":"Next","tagName":"h2"},{"title":"Discussion","type":0,"sectionRef":"#","url":"/docs/course-info/Discussion","content":"Discussion","keywords":"","version":"Next"},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/docs/course-info/Syllabus","content":"Syllabus","keywords":"","version":"Next"},{"title":"Schedule","type":0,"sectionRef":"#","url":"/docs/course-info/Schedule","content":"Schedule","keywords":"","version":"Next"},{"title":"Design Challenges overview","type":0,"sectionRef":"#","url":"/docs/design/design-challenges-overview","content":"Design Challenges overview","keywords":"","version":"Next"},{"title":"Labs Overview","type":0,"sectionRef":"#","url":"/docs","content":"","keywords":"","version":"Next"},{"title":"Journey from zero to robot​","type":1,"pageTitle":"Labs Overview","url":"/docs#journey-from-zero-to-robot","content":" The labs will progress you from learning basic circuits to making an autonomous robot that will compete in a final tournament. The tournament will be an obstacle course where your robot must autonomously navigate through two mazes and find a goal. Winner of the tournament will be the robot with the goal-finding time.  Many people starting COGS 300 balk at the idea that they can build a robot. They may not consider themselves engineers, believe they are bad at coding, are no good at math, etc. Our experience is that everyone (yes, even you!) can indeed learn to build and program a robot by the end of the course. Many people from the Arts are surprised at how well they can do! I have heard many times during office hours how someone can't believe they built a robot. It will happen for you, too.  ","version":"Next","tagName":"h2"},{"title":"Coding and Circuit Building​","type":1,"pageTitle":"Labs Overview","url":"/docs#coding-and-circuit-building","content":" This course will mainly use the Arduino IDE, which uses C++. You do not need to be experienced at C++ programming to start the course, but you will want to become familiar with the basics of reading and writing C++ if you have come from another language (like Racket or Python). Since this is not a coding course, we will be giving only limited instruction in C++ (however, we will provide many working code examples).  You will also need some method of communicating between the Arduino and your computer. You can use the Processing.org IDE, a Java-based IDE that looks and feels very similar to Arduino. We will also use pre-written Python examples, available on the COGS 300 GitHub page.  For those who want to engage at a more advanced level, you are welcome to use any machine learning (ML) framework that you want to guide your robot. We will teach only a limited version of ML in the class so that it is possible for beginners to feel confident. However, you are encouraged to use any ML resources and build the most intelligent robot you can.  ","version":"Next","tagName":"h2"},{"title":"Marking and Structure​","type":1,"pageTitle":"Labs Overview","url":"/docs#marking-and-structure","content":" Each lab has preparatory work that you should do ahead of time called the &quot;pre-lab&quot;. There will usually be some video content, some coding content, and some conceptual content. The pre-labs are not marked, but they are highly suggested to complete to have a good experience in your lab.  During the lab, you will have tasks that you need to complete and show your TA. They are designed to be challenging enough to keep you focused during lab, but not so challenging that you cannot complete them. If you are having difficulty completing them, that's a perfect time to ask for a lot of help from the TA. In this course, unlike many courses, your TA is there to help you, not to test your knowledge. Every question is allowed.  At some point during the lab, the TA will visit your group and ask you to show you the creative work from the previous lab. At this time, they will also go through a post-mortem with you. It is important that you take the post-mortem seriously and be honest during them. There will be some critique, but more importantly, it is a time to talk about difficulties working during the week, and to debug problems both with your robots and your group working structure. Everyone will be required to:  Say one thing that worked well about working together this week.Say one thing that you, personally, accomplished.Say one thing that did not work well about working together this week.  This is designed to get you talking about problems early and often. Nobody is allowed to not talk, everybody has to say one thing positive—and negative. No system is perfect; even if the week went really well, that's the perfect time to practice saying difficult things.  After the lab, you will have homework that you need to complete before the next lab. Usually, there will be a creative component, i.e., you'll need to do something that is beyond the minimum stated requirements to get full marks. Students sometimes find this ambiguity to be difficult. The point of this is not to make your life stressful or to have an unobtainable high bar, but simply to show that you have understood the lab work enough to extend what you've learned into new areas. When they've run them by me, most people's first creative ideas are wonderful and good enough to get full marks easily.  5: Exceptional demonstration of lab concepts (exceeds requirements)4: Good demonstration of lab concepts (meets requirements)3: Reasonable demonstration of lab concepts (one or two requirements unclear)2: Missing one or two lab concepts1: Missing most lab concepts0: No attendance/no completion.  ","version":"Next","tagName":"h2"},{"title":"Attendance​","type":1,"pageTitle":"Labs Overview","url":"/docs#attendance","content":" Attendance at labs is mandatory. If there is a very exceptional instance where you cannot attend, you must inform your TA and group members well ahead of the lab so that alternate plans can be made. This applies to group meetings and outside of class communication as well. You are required to be reachable, communicative, and present.  We do not especially require doctor's notes, unless there starts to be an ongoing issue. Then, you should apply for academic concessions through your faculty and contact COGS advising.  ","version":"Next","tagName":"h3"},{"title":"Materials​","type":1,"pageTitle":"Labs Overview","url":"/docs#materials","content":" Some materials are provided, and some materials you will be required to purchase. Our local electronics store, Lee's is our preferred provider (i.e., we ask them to stock materials), but they are not the cheapest. Cheap is not always better: buyer beware.  ","version":"Next","tagName":"h2"},{"title":"Purchase these yourself​","type":1,"pageTitle":"Labs Overview","url":"/docs#purchase-these-yourself","content":" 1 x Arduino Uno R4 Wifi​  We only officially support the Arduino Uno R4 Wifi. You can use other, similar, cheaper boards at your own risk. Course staff will not help you debug problems that are unique to a knockoff board.  The Arduino Uno R4 Wifi was chosen because:  It allows for wireless communication between boards and computersIt balances price and quality, so that we do not spend unnecessary time debuggingIt is designed to be very beginner-friendly and widely available (i.e., vs. a Raspberry PI)There is a huge user support community, and many, many, many tutorials available  If, for example, you want to use a cheap ESP32, we will not stop you. However, we can't help you much either.  ESP32 The R4 actually includes an ESP32 module!  1+ solderless breadboards​  A solderless breadboard is a helpful prototyping device that allows you to connect circuit components without soldering, i.e., permanently joining wires. You need to purchase at least one medium-sized breadboard for use in lectures, but you may need to purchase more. A limited number of breadboards are available in the lab supplies.  A variety of jumper wires​  You will need to purchase a good amount of jumper wires (at least 10 each of male-male, female-female, and female-male). These are used to connect the different components to your Arduinos.  5+ Visible LEDs of any colour​  The most basic output device for an Arduino is an LED. You will be using these particularly in the beginning of the course as indicators (i.e., is this on? Does this work? Is there power). But they are also helpful for illuminating the ground for line-following challenges. A variety of colours is nice, make sure some are white.  You can also get invisible IR LEDs, but they will only be useful later in the course.  2+ Photoresistor​  A photoresistor is a component that changes resistance according to the amount of light that enters it. They are useful for detecting ambient light changes, and are used for line-following tasks.  3+ IR sensor modules​  An IR Sensor Module can be used for distance sensing or sensing reflectivity. They use invisible infrared light. Some people prefer these for line-following.  4+ Rechargable AA batteries​  The most common debugging problem with the robot is power issues. You will need at least one independent power source for your robot, and the most common and useful will be a recharable AA battery pack. You should feed an absolute maximum of 12V into your robot, so you could buy as many as 8 AA batteries. Note: you can use bigger batteries, different packs, etc., but do not use standard 9V batteries to power your robots, they will run out quickly.  ","version":"Next","tagName":"h3"},{"title":"Lab will provide​","type":1,"pageTitle":"Labs Overview","url":"/docs#lab-will-provide","content":" Ultrasonic distance sensors​  An ultrasonic distance sensor uses soundwaves (higher than you can hear, so &quot;ultra&quot; sonic) to bounce off of objects and detect distances. It is basically just high-pitched sonar. We will provide enough for each robot team to have 2-3, but not enough for each student to have one. If you want your own to take home, you will need to purchase one as well.  Motor driver​  We use both the HG7881 and L9110 motor drivers in our lab. We can provide 1-2 to each robot team. If you would like one to take home, you will need to purchase it yourself.  Motor driver voltage Make sure you only use 12V or less for the motor drivers.  Yellow gearbox motors​  We use 12V TT Yellow Gearbox motors for our robots. Some students prefer to use better motors. You are welcome to use any driver/motor combination that you would like, however, you will need to supply it yourself. You can technically outfit these with an encoder if you want to see how far your wheel has turned.  Robot chasis, hardware and wheels​  The rest of the robot body will be provided by the lab. You may consider whether you want to improve the robot body. Unfortunately, the COGS Lab does not have maker equipment such as laser cutters and 3D printers, but there are plenty of places in Vancouver and on-campus that can provide those items. You're welcome to improve whatever you would like on the robot body, as long as it is built by you, yourself, and still can complete the tournament.  Tools​  The lab has a variety of hand tools, crafting supplies, and multimeters. You may also consider purchasing your own.  Toolkit Getting your own small toolkit will help you to work on circuits at home.  ","version":"Next","tagName":"h3"},{"title":"Circuit diagrams: TinkerCAD and Fritzing​","type":1,"pageTitle":"Labs Overview","url":"/docs#circuit-diagrams-tinkercad-and-fritzing","content":" Where possible, we will use TinkerCAD interactive circuit simulator for diagrams. Since not all of our parts are available on TinkerCAD, we may also use Fritzing diagrams. They'll be free to view, but if you want to create your own, you will need to pay a small amount to use Fritzing.  ","version":"Next","tagName":"h2"},{"title":"Teaching Notes and Concept Library​","type":1,"pageTitle":"Labs Overview","url":"/docs#teaching-notes-and-concept-library","content":" Where possible, all of the course concepts will be documented in the Concept Library. Most teaching activities will include Teaching Notes. These are provided for course staff to review. Students are welcome to read them, but it may be better to simply follow the lab/lecture instructions and experience the concepts first before getting too deep on the details.  See Teaching Notes for more details. ","version":"Next","tagName":"h2"},{"title":"COGS 300 Overview","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"COGS 300 Overview","url":"/docs/intro#overview","content":" Are computational intelligences like biological intelligences? Many things in nature make intelligent use of their environments. Many things seem to perform computations and make decisions based off of signals and information. In COGS 300, we consider the many forms of intelligence that exist in nature, and whether computational models can shed insight on how natural intelligence works. We build physical robots to develop our intuitions about sensation, actuation, and decision-making. We look at intelligence from a complex systems science perspective, weaving together agent and environment. We learn about systems thinking, and the embedded, embodied, and extended approach to cognition.  ","version":"Next","tagName":"h3"},{"title":"Approach​","type":1,"pageTitle":"COGS 300 Overview","url":"/docs/intro#approach","content":" We use a very hands-on approach to learning. Be prepared to work creatively live during class. The focus is on teaching practical skills by working through design problems. Before each lecture, you should prepare by going over the readings and pre-class videos. During class time, we will do hands-on design exercises, participate in demonstrations, and listen to lectures that explain the connection between electrical components, algorithms, and biological intelligent systems. Assignments will be in the form of weekly design challenges will consist of hand-drawn and annotated solutions to design problems. The final exam will also be a design challenge. To assist you in developing your design abilities, you will be required to maintain and hand in a physical sketchbook. Labs will consist of building working robotic systems in groups. Finally, we will hold a robot tournament where groups face off to complete an obstacle course for best time.  ","version":"Next","tagName":"h3"},{"title":"Commitment​","type":1,"pageTitle":"COGS 300 Overview","url":"/docs/intro#commitment","content":" As a 4-credit upper-year UBC course, COGS 300 is designed to be a difficult but rewarding class. Many of you will go from only having taken a little bit of computer science, to building fully-working autonomous robots in a few short months. You should expect to work extensively outside of class time building your robot. You will learn mathematical and computational models, and apply them creatively to design problems. You need to be prepared for active engagement with classmates and the teaching staff during lectures and labs. You will experience the joy (and frustration) of bringing something electronic to &quot;life.&quot; It's worth it!  ","version":"Next","tagName":"h3"},{"title":"Why take the class?​","type":1,"pageTitle":"COGS 300 Overview","url":"/docs/intro#why-take-the-class","content":" There are a lot of good reasons to take COGS 300, even if you are not a COGS student.  Robot components pervade all parts of your modern life, from cars to computers to door codes. You will learn how your world has been built.Artificial intelligence is now ubiquitous. You will learn the underpinnings of AI at an intuitive and practical level.Computational models of intelligence are sometimes good and sometimes bad models of natural biological intelligence. You'll be able to discern good and bad claims about computation and intelligence.It's fun. Making a robot is just plain fun. ","version":"Next","tagName":"h3"},{"title":"Lab 03. Build Your Own Bot","type":0,"sectionRef":"#","url":"/docs/labs/lab03","content":"Lab 03. Build Your Own Bot","keywords":"","version":"Next"},{"title":"Lab 01. Interfacing with Arduino","type":0,"sectionRef":"#","url":"/docs/concepts/teaching/labs/lab01","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/concepts/teaching/labs/lab01#overview","content":" Link to Lab 01  This lab will be most people's introduction to a few big, new ideas that are at the core of the course's technical content:  Physical circuit designControlling physical objects with a microcontrollerEvent loops and real-time operationSerial communication between a microcontroller and a computer program  Many of these ideas are difficult to get across conceptually. It is best to mostly allow them to be understood experientially first. It may take some people the whole term to really understand them.  ","version":"Next","tagName":"h2"},{"title":"Materials and Prep​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/concepts/teaching/labs/lab01#materials-and-prep","content":" Arduino Arduino IDEGetting StartedLED Matrix TutorialSerial MonitorBlink Processing Processing.orgHello Processing TinkerCAD TinkerCAD Tools multimeter Code Lab 01 GitHub  Make yourself familiar with the basics of the above links. Know how to build a circuit, use the multimeter, and communicate between Arduino and Processing. It's always better to a bit more prepared than the students, e.g., build your own version of the design challenge.  ","version":"Next","tagName":"h2"},{"title":"TODOs​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/concepts/teaching/labs/lab01#todos","content":" Introduce yourself to the students. Tell them your major, your experience with COGS and robotics, and why you're excited to TA the course. Tell them about your role, office hours, and contact info (include Piazza and COGS discord).Introduce the students to the lab. Go over lab rules, safety procedures, and equipment location. Tell them about the shelves, black boxes, and equipment storage/signout procedures.Demo TinkerCAD. Show TinkerCAD, including the code, visual circuit programmer, engineering circuit diagram, and simulation features. Show the multimeter in TinkerCAD.Demo and explain the Arduino. Show the same things from TinkerCAD on the real, live, Arduino. Show the LED matrix, serial monitor, and blink sketch. Demonstrate the key pins and concepts behind the pins.Demo the multimeter. Show how to get a continuity reading, voltage reading, and current reading.  ","version":"Next","tagName":"h2"},{"title":"Slides​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/concepts/teaching/labs/lab01#slides","content":" Generate slides using Marp. If you're using the CLI, save the following to lab01.md and run marp lab01.md. Pre-written markdown and pre-rendered html available.  --- theme: uncover --- # Hello, my name is ______. Major: ______. Office hours: ______. Contact info: ______. Piazza link: ______. Discord link: ______. --- # Welcome to the COGS 300 Lab The COGS 300 Lab is available for you to use during the day (7:00am - 9:00pm). You are welcome to claim a shelf with your team, use a black lock box, and use the equipment. --- # Lab Rules 1. **Clean up after yourself.** Clean up _more_ than what you used. What goes around comes around. Ensure your table is totally clear. 2. **Turn everything off.** Ensure everything (i.e., lights, soldering iron, etc.) is _off_ and _cold_ before you leave. 3. **Sweep and remove trash**. If there is trash in the trash box, take it out. Waste sorting is around the corner from Chris and Colleen's office. --- # Safety Procedures &lt;style scoped&gt;section{font-size:30px;}&lt;/style&gt; 1. Soldering must be only done on the soldering table. 2. The charcoal filter fan must be running while you solder. 3. Familiarize yourself with the location of the fire extinguisher. 4. Familiarize yourself with the exit routes. 5. Unplug anything that starts to get hot, produce smoke, or smell bad. You are working with live electricity. Although the Arduino's 5V output is not enough to damage you, it can damage your computer or Arduino. Do not plug anything in unless you are _certain_ that it is safe. Be particularly certain of anything that plugs into the wall. _Wall power can kill you._ --- # Equipment rules 1. All tools are to remain in the COGS lab. No exceptions. 2. Robot parts are allowed to be borrowed, but must be signed out. 3. Return all parts that you have borrowed and sign them back in. 4. Do not borrow more than you absolutely need. 5. If you need something for more than a week, buy it. --- # Lab Storage 1. You're free to claim a shelf with your team. 2. You're free to put a lock on a black plastic box. 3. Shelf storage must be removed by the last day of class or it will be thrown out or added to lab inventory. --- # TinkerCAD  ","version":"Next","tagName":"h2"},{"title":"Lab 02. Sensing and Interacting","type":0,"sectionRef":"#","url":"/docs/labs/lab02","content":"Lab 02. Sensing and Interacting","keywords":"","version":"Next"},{"title":"Lab 05. Detecting Lines","type":0,"sectionRef":"#","url":"/docs/labs/lab05","content":"Lab 05. Detecting Lines","keywords":"","version":"Next"},{"title":"Lab 11. Tournament Practice","type":0,"sectionRef":"#","url":"/docs/labs/lab11","content":"Lab 11. Tournament Practice","keywords":"","version":"Next"},{"title":"Lab 08. Learning from Mistakes","type":0,"sectionRef":"#","url":"/docs/labs/lab08","content":"Lab 08. Learning from Mistakes","keywords":"","version":"Next"},{"title":"Lab 10. Tournament Design","type":0,"sectionRef":"#","url":"/docs/labs/lab10","content":"Lab 10. Tournament Design","keywords":"","version":"Next"},{"title":"Lab 04. Detecting Walls","type":0,"sectionRef":"#","url":"/docs/labs/lab04","content":"Lab 04. Detecting Walls","keywords":"","version":"Next"},{"title":"Lab 07. Model Tournament","type":0,"sectionRef":"#","url":"/docs/labs/lab07","content":"Lab 07. Model Tournament","keywords":"","version":"Next"},{"title":"Lab 09. Making Choices","type":0,"sectionRef":"#","url":"/docs/labs/lab09","content":"Lab 09. Making Choices","keywords":"","version":"Next"},{"title":"W08. Environments 01","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W08. Environments 01","content":"W08. Environments 01","keywords":"","version":"Next"},{"title":"W06. Detection 02","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W06. Detection 02","content":"W06. Detection 02","keywords":"","version":"Next"},{"title":"Lab 06. Detecting Objects","type":0,"sectionRef":"#","url":"/docs/labs/lab06","content":"Lab 06. Detecting Objects","keywords":"","version":"Next"},{"title":"W07. Automata 01","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W07. Automata 01","content":"W07. Automata 01","keywords":"","version":"Next"},{"title":"W08. Environments 02","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W08. Environments 02","content":"W08. Environments 02","keywords":"","version":"Next"},{"title":"Lab 12. Tournament","type":0,"sectionRef":"#","url":"/docs/labs/lab12","content":"Lab 12. Tournament","keywords":"","version":"Next"},{"title":"W07. Automata 02","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W07. Automata 02","content":"W07. Automata 02","keywords":"","version":"Next"},{"title":"W09. Communication 01","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W09. Communication 01","content":"W09. Communication 01","keywords":"","version":"Next"},{"title":"W10. Learning 02","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W10. Learning 02","content":"W10. Learning 02","keywords":"","version":"Next"},{"title":"W10. Learning 01","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W10. Learning 01","content":"W10. Learning 01","keywords":"","version":"Next"},{"title":"W06. Detection 01","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W06. Detection 01","content":"W06. Detection 01","keywords":"","version":"Next"},{"title":"W11. Behaviour 01","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W11. Behaviour 01","content":"W11. Behaviour 01","keywords":"","version":"Next"},{"title":"W12. Decisions 02","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W12. Decisions 02","content":"W12. Decisions 02","keywords":"","version":"Next"},{"title":"W11. Behaviour 02","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W11. Behaviour 02","content":"W11. Behaviour 02","keywords":"","version":"Next"},{"title":"W13. Generation 01","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W13. Generation 01","content":"W13. Generation 01","keywords":"","version":"Next"},{"title":"W01. Introduction 01","type":0,"sectionRef":"#","url":"/docs/lectures/Introduction/W01. Introduction 01","content":"W01. Introduction 01","keywords":"","version":"Next"},{"title":"W13. Generation 02","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W13. Generation 02","content":"W13. Generation 02","keywords":"","version":"Next"},{"title":"W02. Sensation 01","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W02. Sensation 01","content":"W02. Sensation 01","keywords":"","version":"Next"},{"title":"W02. Sensation 02","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W02. Sensation 02","content":"W02. Sensation 02","keywords":"","version":"Next"},{"title":"W12. Decisions 01","type":0,"sectionRef":"#","url":"/docs/lectures/Intelligence/W12. Decisions 01","content":"W12. Decisions 01","keywords":"","version":"Next"},{"title":"W09. Communication 02","type":0,"sectionRef":"#","url":"/docs/lectures/Emergence/W09. Communication 02","content":"W09. Communication 02","keywords":"","version":"Next"},{"title":"W03. Actuation 02","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W03. Actuation 02","content":"W03. Actuation 02","keywords":"","version":"Next"},{"title":"W03. Actuation 01","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W03. Actuation 01","content":"W03. Actuation 01","keywords":"","version":"Next"},{"title":"W05. Signals 01","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W05. Signals 01","content":"W05. Signals 01","keywords":"","version":"Next"},{"title":"W01. Introduction 02","type":0,"sectionRef":"#","url":"/docs/lectures/Introduction/W01. Introduction 02","content":"W01. Introduction 02","keywords":"","version":"Next"},{"title":"W04. Control 01","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W04. Control 01","content":"W04. Control 01","keywords":"","version":"Next"},{"title":"Lectures overview","type":0,"sectionRef":"#","url":"/docs/lectures/overview","content":"Lectures overview","keywords":"","version":"Next"},{"title":"W05. Signals 02","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W05. Signals 02","content":"W05. Signals 02","keywords":"","version":"Next"},{"title":"W04. Control 02","type":0,"sectionRef":"#","url":"/docs/lectures/Movement/W04. Control 02","content":"W04. Control 02","keywords":"","version":"Next"},{"title":"Lab 01. Interfacing with Arduino","type":0,"sectionRef":"#","url":"/docs/labs/lab01","content":"","keywords":"","version":"Next"},{"title":"Pre-lab​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#pre-lab","content":" ","version":"Next","tagName":"h2"},{"title":"1. Download and Install the Arduino IDE​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#1-download-and-install-the-arduino-ide","content":" Download the Arduino IDE and make sure that it works for your operating system. Make sure that you are using the desktop verison.  ","version":"Next","tagName":"h3"},{"title":"2. Review the getting started tutorial​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#2-review-the-getting-started-tutorial","content":" Review the Getting Started. It's OK if you don't understand everything here, since we'll be going through a lot of the concepts in lecture. There is a setup video available, although it may not match your exact Arduino board.  You can also follow along with Paul McWhorter's Arduino Tutorials. Lesson 01, Lesson 02 and Lesson 03 are most relevant to this lab, however, you can watch up to Lesson 09 if you would like. Remember, these are not required, but provided for your benefit.  ","version":"Next","tagName":"h3"},{"title":"3. Test the LED matrix​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#3-test-the-led-matrix","content":" You don't need any circuit-building experience to test the Arduino's built-in LED matrix. Go to the LED Matrix Tutorial and get used to uploading sketches. Again, it's OK if you don't understand everything that's going on. Just make sure you get used to uploading sketches.  ","version":"Next","tagName":"h3"},{"title":"4. Print a value to the Serial Monitor​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#4-print-a-value-to-the-serial-monitor","content":" The Serial Monitor is a very valuable debugging tool. As the name implies, it monitors serial communication from the Arduino to the computer. It is not the same as an output console, i.e., it will not print errors unless you specifically program it, but is the only way to monitor values from your program live.  void setup() { Serial.begin(9600); } void loop() { Serial.println(&quot;Hello world!&quot;); delay(1000); }   Upload the above program to your Arduino and ensure you can see the &quot;Hello, World!&quot; output in your Serial Monitor. If you can't, ensure that the baud rate (9600 in the above program) matches the baud rate on your Arduino IDE's Serial Monitor.  ","version":"Next","tagName":"h3"},{"title":"5. Download the Processing.org IDE​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#5-download-the-processingorg-ide","content":" This term, by popular request, we will be using the Arduino to communicate with our computers and run small machine learning programs. Processing.org is an easy-to-use Java-based system that many people have made Arduino projects for. If you want more information, review the Hello Processing tutorial.  ","version":"Next","tagName":"h3"},{"title":"Lab​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#lab","content":" Welcome to your first lab! Today is designed to be something that you could complete on your own if needed. However, you will eventually need to make a group for your robot project. Use this time to meet new people, and discover who you like to work with in your lab.  Make your own groups of up to four people for this lab. Work together, but each person in the group should ensure they can complete the challenges on their own Arduino board/computer setup.  ","version":"Next","tagName":"h2"},{"title":"1. Make an LED Blink​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#1-make-an-led-blink","content":" The first Arduino program that people typically build is Blink. It is a sort of &quot;Hello, World!&quot; program for Arduino. It can also be used as the simplest debugging program. If you're ever unsure of whether your board is working, unplug everything except a single LED, and make it blink.  We have also created a version of the circuit in TinkerCAD. The circuit should be the same as above, but you can also run the TinkerCAD simulator to ensure that your physical Arduino is running the same as the simulated one on TinkerCAD.  Next, see how the multimeter works. A multimeter will be your best debugging tool. Learn how to use it by filling in the table below.  Test the continuity, voltage, and current of the circuit using the multimeter. Complete the chart by putting the black probe at the ground wire and the red probe at the component position listed below:   Position\tLED\tVoltage\tCurrentBefore the resistor\tOn After the resistor\tOn Before the LED\tOn After the LED\tOn Before the resistor\tOff After the resistor\tOff Before the LED\tOff After the LED\tOff   ","version":"Next","tagName":"h3"},{"title":"2. Communicate from Arduino to Processing​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#2-communicate-from-arduino-to-processing","content":" Extend your Arduino code to print the current on/off value of your LED. You'll need to use a Serial.print() and Serial.println() statement.  Once you've got your LED value printing on the Arduino, start the following Processing sketch:  // Processing sketch to read value from Arduino import processing.serial.*; Serial myPort; // The serial port String incoming; // Incoming serial data int ledValue; // Parsed sensor value void setup() { size(400, 400); // List all available ports and print to console printArray(Serial.list()); // Change [0] to the correct port index after checking the list String portName = Serial.list()[2]; myPort = new Serial(this, portName, 9600); myPort.bufferUntil('\\n'); // Trigger serialEvent on newline } void draw() { background(0); fill(255); text(&quot;LED Value: &quot; + ledValue, 50, height / 2); } void serialEvent(Serial myPort) { incoming = myPort.readStringUntil('\\n'); if (incoming != null) { incoming = trim(incoming); if (incoming.length() &gt; 0) { ledValue = int(incoming); } } }   Choose the right port You may need to look through the port list to ensure you're communicating with your Arduino, rather than another device.  ","version":"Next","tagName":"h3"},{"title":"3. Communicate from Processing to Arduino​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#3-communicate-from-processing-to-arduino","content":" Now, make a program that turns an LED on and off. We've provided starter code for you.  Here's the Processing.org code (no changes needed):  // Processing sketch to turn LED on/off import processing.serial.*; Serial myPort; boolean ledOn = false; void setup() { size(300, 200); printArray(Serial.list()); // See available ports String portName = Serial.list()[0]; // Adjust index as needed myPort = new Serial(this, portName, 9600); textAlign(CENTER, CENTER); textSize(20); } void draw() { background(ledOn ? color(0, 255, 0) : color(255, 0, 0)); fill(255); text(ledOn ? &quot;LED ON&quot; : &quot;LED OFF&quot;, width / 2, height / 2); } void mousePressed() { ledOn = !ledOn; myPort.write(ledOn ? '1' : '0'); }   Here's the Arduino code:  // Arduino code to turn an LED on/off via serial const int ledPin = 13; // Built-in LED pin on most boards void setup() { pinMode(ledPin, OUTPUT); Serial.begin(9600); } void loop() { if (Serial.available()) { char command = Serial.read(); if (command == '1') { // TODO: Add your code here } else if (command == '0') { // TODO: Add your code here } } }   ","version":"Next","tagName":"h3"},{"title":"4. Make an LED dimmer interface​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#4-make-an-led-dimmer-interface","content":" For this week's creative challenge, make LED dimmer that takes commands from Processing, and outputs to your real, live LED via Arduino.  Think through the LED's duty cycle, i.e., how long it is off vs. on. There is also a helpful Arduino Fade tutorial. For the Processing sketch, you may want to look at the Mouse 1D tutorial for ideas.  Remember that we give top marks only for exceeding the minimum requirements. For this week, we'll give you some hints. Try adding more LEDs, different keyboard or mouse inputs from Processing, or think up something entirely new that uses LED dimming.  Submit a video of your working dimmer program on Discord by the night before your lab.  ","version":"Next","tagName":"h3"},{"title":"TODOs​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#todos","content":" ","version":"Next","tagName":"h2"},{"title":"By the end of this class, show your TA the following​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#by-the-end-of-this-class-show-your-ta-the-following","content":" Your completed, working blink circuitYour completed voltage tableYour completed, working LED control from Processing to Arduino  ","version":"Next","tagName":"h3"},{"title":"By the beginning of next class, show your TA the following​","type":1,"pageTitle":"Lab 01. Interfacing with Arduino","url":"/docs/labs/lab01#by-the-beginning-of-next-class-show-your-ta-the-following","content":" Your completed dimmer program  Each lab will be marked out of 5. To get 5/5, you will need to come up with something extra that is not directly specified in the lab, i.e., you will have to be creative.  5: Exceptional demonstration of lab concepts (exceeds requirements)4: Good demonstration of lab concepts (meets requirements)3: Reasonable demonstration of lab concepts (one or two requirements unclear)2: Missing one or two lab concepts1: Missing most lab concepts0: No attendance/no completion.  See Teaching notes for extra info. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}